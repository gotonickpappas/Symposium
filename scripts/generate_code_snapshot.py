#!/usr/bin/env python3
"""
Code Snapshot Generator for Symposium Knowledge Base
Walks through src/ directory and generates markdown-formatted code dump
"""

import os
import sys
from pathlib import Path

def generate_code_snapshot():
    """Generate a complete code snapshot in markdown format."""
    
    # Determine project root (where this script is run from)
    project_root = Path.cwd()
    src_dir = project_root / "src"
    
    # Output file location
    output_file = project_root / "docs" / "codesnapshot.md"
    
    # Create docs directory if it doesn't exist
    output_file.parent.mkdir(exist_ok=True)
    
    if not src_dir.exists():
        print(f"ERROR: src/ directory not found at {src_dir}")
        sys.exit(1)
    
    # Collect all Python files
    python_files = list(src_dir.rglob("*.py"))
    
    # Also include other relevant files
    other_files = []
    for pattern in ["*.bat", "*.txt", "*.md"]:
        other_files.extend(project_root.glob(pattern))
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# Complete Code Snapshot\n\n")
        f.write("*Auto-generated by generate_code_snapshot.py*\n\n")
        
        # Write Python source files
        f.write("## Python Source Files\n\n")
        
        for py_file in sorted(python_files):
            rel_path = py_file.relative_to(project_root)
            f.write(f"**File: {rel_path}**\n\n")
            
            try:
                with open(py_file, 'r', encoding='utf-8') as source:
                    content = source.read()
                    f.write("```python\n")
                    f.write(content)
                    f.write("\n```\n\n")
            except Exception as e:
                f.write(f"*Error reading file: {e}*\n\n")
        
        # Write scripts directory
        f.write("## Scripts Directory\n\n")
        
        for script_file in sorted(script_files):
            if script_file.is_file():
                rel_path = script_file.relative_to(project_root)
                f.write(f"**File: {rel_path}**\n\n")
                
                try:
                    with open(script_file, 'r', encoding='utf-8') as source:
                        content = source.read()
                        if script_file.suffix == '.py':
                            f.write("```python\n")
                        elif script_file.suffix == '.bat':
                            f.write("```batch\n")
                        else:
                            f.write("```\n")
                        f.write(content)
                        f.write("\n```\n\n")
                except Exception as e:
                    f.write(f"*Error reading file: {e}*\n\n")
        
        # Write important root files
        f.write("## Project Root Files\n\n")
        
        for root_file in sorted(important_root_files):
            rel_path = root_file.relative_to(project_root)
            f.write(f"**File: {rel_path}**\n\n")
            
            try:
                with open(root_file, 'r', encoding='utf-8') as source:
                    content = source.read()
                    if root_file.suffix == '.bat':
                        f.write("```batch\n")
                    else:
                        f.write("```\n")
                    f.write(content)
                    f.write("\n```\n\n")
            except Exception as e:
                f.write(f"*Error reading file: {e}*\n\n")
    
    print(f"Code snapshot generated: {output_file}")
    print(f"Processed {len(python_files)} Python files")

if __name__ == "__main__":
    generate_code_snapshot()